import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigInteger;
import java.util.List;

public class ResultsDialog extends JDialog {
  private JPanel contentPane;
  private JButton buttonOK;
  private JTable voteTable;
  private final BulletinBoard board;

  public ResultsDialog(BulletinBoard board) {
    this.board = board;
    $$$setupUI$$$();
    setContentPane(contentPane);
    setModal(true);
    getRootPane().setDefaultButton(buttonOK);

    buttonOK.addActionListener(e -> onOK());

    // call onCancel() when cross is clicked
    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
    addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        dispose();
      }
    });

    // call onCancel() on ESCAPE
    contentPane.registerKeyboardAction(e -> dispose(), KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
  }

  private void onOK() {
    // add your code here
    dispose();
  }

  private void createUIComponents() {
    List<List<BigInteger>> voteMatrix = board.getVoteMatrix();
    String columnNames[] = new String[board.candidates.size() + 1];
    columnNames[0] = "Voter #";
    for (int i = 0; i < board.candidates.size(); i++) {
      columnNames[i + 1] = board.candidates.get(i);
    }
    TableModel model = new DefaultTableModel(columnNames, voteMatrix.size() + 1) {
      public boolean isCellEditable(int row, int column) {
        return false;
      }
    };
    voteTable = new JTable(model);
    for (int i = 0; i < voteMatrix.size(); i++) {
      voteTable.setValueAt(i, i, 0);
      for (int j = 0; j < voteMatrix.get(i).size(); j++) {
        voteTable.setValueAt(voteMatrix.get(i).get(j), i, j + 1);
      }
    }
    voteTable.setValueAt("Totals:", voteMatrix.size(), 0);
    BigInteger[] bigIntegers = board.sendVotesToCountingAuthority();
    for (int i = 0; i < board.candidates.size(); i++) {
      voteTable.setValueAt(bigIntegers[i], voteMatrix.size(), i + 1);
    }
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, -1));
    buttonOK = new JButton();
    buttonOK.setText("OK");
    contentPane.add(buttonOK, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    final JScrollPane scrollPane1 = new JScrollPane();
    panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    scrollPane1.setViewportView(voteTable);
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() { return contentPane; }
}
